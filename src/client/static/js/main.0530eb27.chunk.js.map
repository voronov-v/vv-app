{"version":3,"sources":["assets/images/vv_logo.jpg","assets/images/torontoImg.jpg","assets/images/dubaiImg.jpg","assets/images/los-angelesImg.jpg","assets/images/londonImg.jpg","assets/images/mapBackgroundImg.jpg","assets/images/sanFransiscoImg.jpg","assets/images/cancunImg.jpg","assets/images/googleLogo.jpg","serviceWorker.ts","sections/NotFound/index.tsx","lib/graphql/queries/User/index.ts","lib/utils/index.ts","lib/graphql/mutations/DisconnectStripe/index.ts","sections/UserPage/components/UserProfile/index.tsx","components/ErrorBanner/index.tsx","components/PageSkeleton/index.tsx","components/ListingCard/index.tsx","sections/UserPage/components/UserListings/index.tsx","sections/UserPage/components/UserBookings/index.tsx","sections/UserPage/index.tsx","lib/graphql/queries/Listings/index.ts","lib/graphql/globalTypes.ts","sections/HomePage/components/HomeHero/index.tsx","sections/HomePage/components/HomeListings/index.tsx","sections/HomePage/components/HomeListingsSkeleton/index.tsx","sections/HomePage/index.tsx","lib/graphql/queries/Listing/index.ts","sections/ListingPage/components/ListingDetails/index.tsx","sections/ListingPage/components/ListingBookings/index.tsx","sections/ListingPage/components/ListingCreateBooking/index.tsx","sections/ListingPage/index.tsx","sections/ListingsPage/ListingsFilter/index.tsx","sections/ListingsPage/ListingsPagination/index.tsx","sections/ListingsPage/ListingsSkeleton/index.tsx","sections/ListingsPage/index.tsx","lib/graphql/mutations/ConnectStripe/index.ts","sections/StripePage/index.tsx","lib/graphql/mutations/HostListing/index.ts","sections/HostPage/index.tsx","lib/graphql/mutations/LogIn/index.ts","lib/graphql/queries/AuthUrl/index.ts","sections/Login/index.tsx","lib/graphql/mutations/LogOut/index.ts","sections/AppHeader/components/MenuItems/index.tsx","sections/AppHeader/index.tsx","components/AppHeaderSkeleton/index.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","NotFound","USER","gql","formatListingPrice","price","round","formattedListingPrice","Math","displaySuccessNotification","message","description","notification","placement","style","marginTop","displayErrorMessage","error","DISCONNECT_STRIPE","stripeAuthUrl","process","Title","Typography","Paragraph","Text","UserProfile","user","viewer","setViewer","viewerIsUser","handleUserRefetch","useMutation","onCompleted","data","disconnectStripe","hasWallet","onError","loading","additionalDetails","color","strong","income","type","className","onClick","href","target","rel","additionalDetailsSection","level","size","src","avatar","name","contact","ErrorBanner","banner","closable","PageSkeleton","skeletonParagraph","active","paragraph","rows","ListingCard","listing","id","title","image","address","numOfGuests","to","hoverable","cover","backgroundImage","ellipsis","ProfileOutlined","UserListings","userListings","listingPage","limit","setListingsPage","total","result","userListingsList","grid","gutter","xs","sm","lg","dataSource","locale","emptyText","pagination","position","current","defaultPageSize","hideOnSinglePage","showLessItems","onChange","page","renderItem","userListing","Item","UserBookings","userBookings","bookingsPage","setBookingsPage","userBookingsList","undefined","userBooking","bookingHistory","checkIn","checkOut","UserPage","useState","listingsPage","useQuery","variables","params","refetch","a","stripeErrorBanner","URL","searchParams","get","Content","listings","bookings","userListingsElement","userBookingsElement","userProfileElement","justify","display","ListingType","ListingsFilter","LISTINGS","Search","Input","HomeHero","onSearch","placeholder","enterButton","md","alt","torontoImage","dubaiImage","losAngelesImage","londonImage","HomeListings","xl","xxl","HomeListingsSkeleton","HomePage","history","filter","PRICE_HIGH_TO_LOW","mapBackgroundImage","value","trimmedValue","trim","push","sanFranciscoImage","cancunImage","LISTING","ListingDetails","city","host","EnvironmentOutlined","expandable","ListingBookings","listingBookings","listingBookingsList","tenant","shape","ListingCreateBooking","checkInDate","checkOutDate","setCheckInDate","setCheckOutDate","disableDate","currentDate","isBefore","moment","endOf","dateValue","format","disabledDate","showToday","onOpenChange","selectedCheckOutDate","verifyAndSetCheckoutDate","disabled","ListingPage","console","log","listingDetailsElement","listingBookingsElement","listingCreateBookingElement","ListingsFilters","setFilter","Option","PRICE_LOW_TO_HIGH","ListingsPagination","setPage","showSizeChanger","ListingsSkeleton","ListingsPage","locationRef","useRef","skip","useEffect","listingsRegion","region","listingsSectionElement","length","offsetTop","mark","listingsRegionElement","CONNECT_STRIPE","StripePage","connectStripe","connectStripeRef","code","input","replace","tip","HOST_LISTING","HostPage","imageLoading","setImageLoading","imageBase64","setImageBase64","hostListing","hostListingRef","layout","onFinish","values","fullAddress","state","postalCode","label","rules","required","Group","Button","APARTMENT","BankOutlined","HOUSE","HomeOutlined","min","extra","maxLength","TextArea","listType","showUploadList","action","beforeUpload","beforeImageUpload","info","file","status","originFileObj","getBase64Value","imageBase64Value","LoadingOutlined","PlusOutlined","htmlType","fileIsValidImage","fileIsValidSize","img","callback","reader","FileReader","readAsDataURL","onload","LOG_IN","AUTH_URL","Login","client","useApolloClient","logIn","token","sessionStorage","setItem","logInData","logInLoading","logInError","logInRef","handleAuthorize","query","authUrl","viewerId","logInErrorBannerElement","role","aria-label","googleLogo","LOG_OUT","MenuItems","logOut","removeItem","logout","subMenuLogin","SubMenu","key","ProfileFilled","LogoutOutlined","mode","selectable","AppHeader","withRouter","search","setSearch","pathname","pathnameSubStrings","split","includes","Header","vv_logo","evt","AppHeaderSkeleton","initialViewer","didRequest","App","exact","path","component","render","props","ApolloClient","uri","request","operation","getItem","setContext","headers","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0530eb27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vv_logo.f8b26f0f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/torontoImg.3c573d34.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dubaiImg.df994899.jpg\";","module.exports = __webpack_public_path__ + \"static/media/los-angelesImg.73d8ec96.jpg\";","module.exports = __webpack_public_path__ + \"static/media/londonImg.841651c3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mapBackgroundImg.c21df147.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sanFransiscoImg.23aadf81.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cancunImg.cd98e2c3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/googleLogo.f4a5f9ab.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nexport const NotFound = () => {\n  return <h2>NotFound</h2>;\n};\n","import { gql } from 'apollo-boost';\n\nexport const USER = gql`\n  query User($id: ID!, $bookingsPage: Int!, $listingsPage: Int!, $limit: Int!) {\n    user(id: $id) {\n      id\n      name\n      avatar\n      contact\n      hasWallet\n      income\n      bookings(limit: $limit, page: $bookingsPage) {\n        total\n        result {\n          id\n          listing {\n            id\n            title\n            image\n            address\n            price\n            numOfGuests\n          }\n          checkIn\n          checkOut\n        }\n      }\n      listings(limit: $limit, page: $listingsPage) {\n        total\n        result {\n          id\n          title\n          image\n          address\n          price\n          numOfGuests\n        }\n      }\n    }\n  }\n`;\n","import { message, notification } from 'antd';\n\nexport const iconColor = '#1890ff';\nexport const formatListingPrice = (price: number, round = true) => {\n  const formattedListingPrice = round ? Math.round(price / 100) : price;\n  return `$${formattedListingPrice}`;\n};\n\nexport const displaySuccessNotification = (message: string, description?: string) => {\n  return notification['success']({\n    message,\n    description,\n    placement: 'topLeft',\n    style: {\n      marginTop: 50,\n    },\n  });\n};\n\nexport const displayErrorMessage = (error: string) => {\n  return message.error(error);\n};\n","import { gql } from 'apollo-boost';\n\nexport const DISCONNECT_STRIPE = gql`\n  mutation DisconnectStripe {\n    disconnectStripe {\n      hasWallet\n    }\n  }\n`;\n","import React from 'react';\nimport { User } from '../../../../lib/graphql/queries/User/__generated__/User';\nimport { Avatar, Button, Card, Divider, Typography, Tag } from 'antd';\nimport { displayErrorMessage, displaySuccessNotification, formatListingPrice } from '../../../../lib/utils';\nimport { DISCONNECT_STRIPE } from '../../../../lib/graphql/mutations/DisconnectStripe';\nimport { DisconnectStripe } from '../../../../lib/graphql/mutations/DisconnectStripe/__generated__/DisconnectStripe';\nimport { useMutation } from 'react-apollo';\nimport { Viewer } from '../../../../general/types';\n\ntype UserProfileProps = {\n  user: User['user'];\n  viewerIsUser: boolean;\n  viewer: Viewer;\n  setViewer: (viewer: Viewer) => void;\n  handleUserRefetch: () => void;\n};\n\nconst stripeAuthUrl = `https://connect.stripe.com/oauth/authorize?response_type=code&client_id=${process.env.REACT_APP_S_CLIENT_ID}&scope=read_write`;\nconst { Title, Paragraph, Text } = Typography;\n\nexport const UserProfile = ({ user, viewer, setViewer, viewerIsUser, handleUserRefetch }: UserProfileProps) => {\n  const [disconnectStripe, { loading }] = useMutation<DisconnectStripe>(DISCONNECT_STRIPE, {\n    onCompleted: (data) => {\n      if (data && data.disconnectStripe) {\n        setViewer({ ...viewer, hasWallet: data.disconnectStripe.hasWallet });\n        displaySuccessNotification(\n          `You've successfully disconnected from Stripe!`,\n          `You'll have to reconnect with Stripe to continue to create listings.`,\n        );\n        handleUserRefetch();\n      }\n    },\n    onError: () => {\n      displayErrorMessage(`Sorry! We weren't able to disconnect you from Stripe. Please try again later!`);\n    },\n  });\n\n  const redirectToStripe = () => {\n    window.location.href = stripeAuthUrl;\n  };\n\n  const additionalDetails = user.hasWallet ? (\n    <>\n      <Paragraph>\n        <Tag color={'green'}>Stripe Registered</Tag>\n      </Paragraph>\n      <Paragraph>\n        Income Earned: {''}\n        <Text strong>{user.income ? formatListingPrice(user.income) : `$0`}</Text>\n      </Paragraph>\n      <Button\n        type={'primary'}\n        className={'user-profile__details-cta'}\n        loading={loading}\n        onClick={() => disconnectStripe()}\n      >\n        Disconnect Stripe\n      </Button>\n      <Paragraph>\n        By disconnecting, you won't be able to receive <Text strong>any further payments</Text>. This will prevent users\n        from booking listing that you might have already created\n      </Paragraph>\n    </>\n  ) : (\n    <>\n      <Paragraph>Interested in becoming a TinyHouse host? Register with your Stripe account!</Paragraph>\n      <Button type={'primary'} className={'user-profile__details-cta'} onClick={redirectToStripe}>\n        Connect with Stripe\n      </Button>\n      <Paragraph type={'secondary'}>\n        TinyHouse uses{' '}\n        <a href={'https://stripe.com/en-US/connect'} target={'_blank'} rel={'noopener noreferrer'}>\n          Stripe\n        </a>{' '}\n        to help transfer your earnings in a secure and truster manner.\n      </Paragraph>\n    </>\n  );\n\n  const additionalDetailsSection = viewerIsUser ? (\n    <>\n      <Divider />\n      <div className={'user-profile__details'}>\n        <Title level={4}>Additional Details</Title>\n        {additionalDetails}\n      </div>\n    </>\n  ) : null;\n\n  return (\n    <div className={'user-profile'}>\n      <Card className={'user-profile__card'}>\n        <div className={'user-profile__avatar'}>\n          <Avatar size={100} src={user.avatar} />\n        </div>\n        <Divider />\n        <div className={'user-profile__details'}>\n          <Title level={4}>Details</Title>\n          <Paragraph>Name: {<Text strong>{user.name}</Text>}</Paragraph>\n          <Paragraph>Contact: {<Text strong>{user.contact}</Text>}</Paragraph>\n        </div>\n        {additionalDetailsSection}\n      </Card>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Alert } from 'antd';\n\ntype ErrorBannerProps = {\n  message?: string;\n  description?: string;\n};\n\nexport const ErrorBanner = ({\n  message = 'Uh oh! Something went wrong :(',\n  description = 'Look like something went wrong. Please check your connection and/or try again later.',\n}: ErrorBannerProps) => {\n  return (\n    <Alert banner closable message={message} description={description} type={'error'} className={'error-banner'} />\n  );\n};\n","import React from 'react';\nimport { Skeleton } from 'antd';\n\nexport const PageSkeleton = () => {\n  const skeletonParagraph = <Skeleton active paragraph={{ rows: 4 }} className={'page-skeleton__paragraph'} />;\n\n  return (\n    <>\n      {skeletonParagraph}\n      {skeletonParagraph}\n      {skeletonParagraph}\n    </>\n  );\n};\n","import React from 'react';\nimport { Card, Typography } from 'antd';\nimport { ProfileOutlined } from '@ant-design/icons';\nimport { formatListingPrice, iconColor } from '../../lib/utils';\nimport './styles.css';\nimport { Link } from 'react-router-dom';\n\nconst { Text, Title } = Typography;\n\ntype ListingCardProps = {\n  listing: {\n    id: string;\n    title: string;\n    image: string;\n    address: string;\n    price: number;\n    numOfGuests: number;\n  };\n};\n\nexport const ListingCard = ({ listing }: ListingCardProps) => {\n  const { id, title, image, address, price, numOfGuests } = listing;\n  return (\n    <Link to={`/listing/${id}`}>\n      <Card\n        hoverable\n        cover={<div className={'listing-card__cover-img'} style={{ backgroundImage: `url(${image})` }} />}\n      >\n        <div className={'listing-card__details'}>\n          <div className={'listing-card__description'}>\n            <Title level={4} className={'listing-card__price'}>\n              {formatListingPrice(price)}\n              <span>/day</span>\n            </Title>\n            <Text strong ellipsis className={'listing-card__title'}>\n              {title}\n            </Text>\n            <Text ellipsis className={'listing-card__location'}>\n              {address}\n            </Text>\n          </div>\n          <div className={'listing-card__dimensions listing-card_dimensions--guests'}>\n            <ProfileOutlined style={{ color: iconColor }} />\n            <Text> {numOfGuests} guests</Text>\n          </div>\n        </div>\n      </Card>\n    </Link>\n  );\n};\n","import React from 'react';\nimport { User } from '../../../../lib/graphql/queries/User/__generated__/User';\nimport { List, Typography } from 'antd';\nimport { ListingCard } from '../../../../components/ListingCard';\n\nconst { Paragraph, Title } = Typography;\n\ntype UserListingsProps = {\n  userListings: User['user']['listings'];\n  listingPage: number;\n  limit: number;\n  setListingsPage: (page: number) => void;\n};\n\nexport const UserListings = ({ userListings, listingPage, limit, setListingsPage }: UserListingsProps) => {\n  const { total, result } = userListings;\n\n  const userListingsList = (\n    <List\n      grid={{ gutter: 8, xs: 1, sm: 2, lg: 4 }}\n      dataSource={result}\n      locale={{ emptyText: `User doesn't have any listings yet!` }}\n      pagination={{\n        position: 'top',\n        current: listingPage,\n        total,\n        defaultPageSize: limit,\n        hideOnSinglePage: true,\n        showLessItems: true,\n        onChange: (page) => setListingsPage(page),\n      }}\n      renderItem={(userListing) => {\n        return (\n          <List.Item>\n            <ListingCard listing={userListing} />\n          </List.Item>\n        );\n      }}\n    />\n  );\n\n  return (\n    <div className={'user-listings'}>\n      <Title level={4} className={'user-listings__title'}>\n        Listings\n      </Title>\n      <Paragraph className={'user-listings__description'}>\n        This section highlights the listings this user current;y hosts and has made available for bookings.\n      </Paragraph>\n      {userListingsList}\n    </div>\n  );\n};\n","import React from 'react';\nimport { User } from '../../../../lib/graphql/queries/User/__generated__/User';\nimport { List, Typography } from 'antd';\nimport { ListingCard } from '../../../../components/ListingCard';\n\nconst { Paragraph, Title, Text } = Typography;\n\ntype UserBookingsProps = {\n  userBookings: User['user']['bookings'];\n  bookingsPage: number;\n  limit: number;\n  setBookingsPage: (page: number) => void;\n};\n\nexport const UserBookings = ({ userBookings, bookingsPage, limit, setBookingsPage }: UserBookingsProps) => {\n  const total = userBookings ? userBookings.total : null;\n  const result = userBookings ? userBookings.result : null;\n\n  const userBookingsList = userBookings ? (\n    <List\n      grid={{ gutter: 8, xs: 1, sm: 2, lg: 4 }}\n      dataSource={result ? result : undefined}\n      locale={{ emptyText: `User doesn't have any bookings yet!` }}\n      pagination={{\n        position: 'top',\n        current: bookingsPage,\n        total: total ? total : undefined,\n        defaultPageSize: limit,\n        hideOnSinglePage: true,\n        showLessItems: true,\n        onChange: (page) => setBookingsPage(page),\n      }}\n      renderItem={(userBooking) => {\n        const bookingHistory = (\n          <div className={'user-bookings__booking-history'}>\n            <div>\n              Check in: <Text strong>{userBooking.checkIn}</Text>\n            </div>\n            <div>\n              Check out: <Text strong>{userBooking.checkOut}</Text>\n            </div>\n          </div>\n        );\n\n        return (\n          <List.Item>\n            {bookingHistory}\n            <ListingCard listing={userBooking.listing} />\n          </List.Item>\n        );\n      }}\n    />\n  ) : null;\n\n  return userBookingsList ? (\n    <div className={'user-bookings'}>\n      <Title level={4} className={'user-bookings__title'}>\n        Bookings\n      </Title>\n      <Paragraph className={'user-bookings__description'}>\n        This section highlights the bookings you've made, and the chech-in/check-out dates associated with said bookings\n      </Paragraph>\n      {userBookingsList}\n    </div>\n  ) : null;\n};\n","import React, { useState } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { useQuery } from 'react-apollo';\nimport { USER } from '../../lib/graphql/queries/User';\nimport { User, UserVariables } from '../../lib/graphql/queries/User/__generated__/User';\nimport { UserProfile } from './components/UserProfile';\nimport { Row, Layout, Col } from 'antd';\nimport { Viewer } from '../../general/types';\nimport { ErrorBanner } from '../../components/ErrorBanner';\nimport { PageSkeleton } from '../../components/PageSkeleton';\nimport { UserListings } from './components/UserListings';\nimport { UserBookings } from './components/UserBookings';\nimport './styles.css';\n\ntype UserPageMatchParams = {\n  id: string;\n};\n\ntype UserPageProps = {\n  viewer: Viewer;\n  setViewer: (viewer: Viewer) => void;\n};\n\nconst PAGE_LIMIT = 4;\n\nexport const UserPage = ({ match, viewer, setViewer }: UserPageProps & RouteComponentProps<UserPageMatchParams>) => {\n  const [listingsPage, setListingsPage] = useState(1);\n  const [bookingsPage, setBookingsPage] = useState(1);\n\n  const { data, loading, error, refetch } = useQuery<User, UserVariables>(USER, {\n    variables: {\n      id: match.params.id,\n      bookingsPage,\n      listingsPage,\n      limit: PAGE_LIMIT,\n    },\n  });\n\n  const handleUserRefetch = async () => {\n    await refetch();\n  };\n\n  const stripeError = new URL(window.location.href).searchParams.get('stripe_error');\n  const stripeErrorBanner = stripeError ? (\n    <ErrorBanner description={'We had an issue connecting with Stripe. Please try again soon.'} />\n  ) : null;\n\n  if (loading) {\n    return (\n      <Layout.Content className={'user'}>\n        <PageSkeleton />\n      </Layout.Content>\n    );\n  }\n\n  if (error) {\n    return (\n      <Layout.Content className={'user'}>\n        <ErrorBanner description={`This user may not exists or we've encountered an error.`} />\n        <PageSkeleton />\n      </Layout.Content>\n    );\n  }\n\n  const user = data ? data.user : null;\n  const viewerIsUser = viewer.id === match.params.id;\n\n  const userListings = user ? user.listings : null;\n  const userBookings = user ? user.bookings : null;\n\n  const userListingsElement = userListings ? (\n    <UserListings\n      userListings={userListings}\n      listingPage={listingsPage}\n      limit={PAGE_LIMIT}\n      setListingsPage={setListingsPage}\n    />\n  ) : null;\n  const userBookingsElement = userListings ? (\n    <UserBookings\n      userBookings={userBookings}\n      bookingsPage={bookingsPage}\n      limit={PAGE_LIMIT}\n      setBookingsPage={setBookingsPage}\n    />\n  ) : null;\n\n  const userProfileElement = user ? (\n    <UserProfile\n      user={user}\n      viewerIsUser={viewerIsUser}\n      viewer={viewer}\n      setViewer={setViewer}\n      handleUserRefetch={handleUserRefetch}\n    />\n  ) : null;\n\n  return (\n    <Layout.Content className={'user'}>\n      {stripeErrorBanner}\n      <Row gutter={12} justify={'space-between'} style={{ display: 'flex' }}>\n        <Col xs={24}>{userProfileElement}</Col>\n        <Col xs={24}>\n          {userListingsElement}\n          {userBookingsElement}\n        </Col>\n      </Row>\n    </Layout.Content>\n  );\n};\n","import { gql } from 'apollo-boost';\n\nexport const LISTINGS = gql`\n  query Listings($location: String, $filter: ListingsFilter!, $limit: Int!, $page: Int!) {\n    listings(location: $location, filter: $filter, limit: $limit, page: $page) {\n      region\n      total\n      result {\n        id\n        title\n        image\n        address\n        price\n        numOfGuests\n      }\n    }\n  }\n`;\n","/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n//==============================================================\n// START Enums and Input Objects\n//==============================================================\n\nexport enum ListingType {\n  APARTMENT = \"APARTMENT\",\n  HOUSE = \"HOUSE\",\n}\n\nexport enum ListingsFilter {\n  PRICE_HIGH_TO_LOW = \"PRICE_HIGH_TO_LOW\",\n  PRICE_LOW_TO_HIGH = \"PRICE_LOW_TO_HIGH\",\n}\n\nexport interface ConnectStripeInput {\n  code: string;\n}\n\nexport interface HostListingInput {\n  title: string;\n  description: string;\n  image: string;\n  type: ListingType;\n  address?: string | null;\n  price: number;\n  numOfGuests: number;\n}\n\nexport interface LogInInput {\n  code: string;\n}\n\n//==============================================================\n// END Enums and Input Objects\n//==============================================================\n","import React from 'react';\nimport { Card, Col, Input, Row, Typography } from 'antd';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\n\nimport torontoImage from '../../../../assets/images/torontoImg.jpg';\nimport dubaiImage from '../../../../assets/images/dubaiImg.jpg';\nimport losAngelesImage from '../../../../assets/images/los-angelesImg.jpg';\nimport londonImage from '../../../../assets/images/londonImg.jpg';\n\nconst { Title } = Typography;\nconst { Search } = Input;\n\ntype HomeHeroProps = {\n  onSearch: (value: string) => void;\n};\n\nexport const HomeHero = ({ onSearch }: HomeHeroProps) => {\n  return (\n    <div className={'home-hero'}>\n      <div className={'home-hero__search'}>\n        <Title className={'home-hero__title'}>Find a place you'll love to stay at</Title>\n        <Search\n          placeholder={`Search 'San Fransisco'`}\n          size={'large'}\n          enterButton\n          className={'home-hero__search-input'}\n          onSearch={onSearch}\n        />\n      </div>\n\n      <Row gutter={12} className={'home-hero__cards'}>\n        <Col xs={12} md={6}>\n          <Link to={'/listings/toronto'}>\n            <Card cover={<img alt={'Toronto'} src={torontoImage} />}>Toronto</Card>\n          </Link>\n        </Col>\n        <Col xs={12} md={6}>\n          <Link to={'/listings/dubai'}>\n            <Card cover={<img alt={'Dubai'} src={dubaiImage} />}>Dubai</Card>\n          </Link>\n        </Col>\n        <Col xs={0} md={6}>\n          <Link to={'/listings/los%20angeles'}>\n            <Card cover={<img alt={'Los Angeles'} src={losAngelesImage} />}>Los Angeles</Card>\n          </Link>\n        </Col>\n        <Col xs={0} md={6}>\n          <Link to={'/listings/london'}>\n            <Card cover={<img alt={'London'} src={londonImage} />}>London</Card>\n          </Link>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n","import React from 'react';\nimport { List, Typography } from 'antd';\nimport { Listings } from '../../../../lib/graphql/queries/Listings/__generated__/Listings';\nimport { ListingCard } from '../../../../components/ListingCard';\nimport './styles.css';\n\nconst { Title } = Typography;\n\ntype HomeListingsProps = {\n  title: string;\n  listings: Listings['listings']['result'];\n};\n\nexport const HomeListings = ({ title, listings }: HomeListingsProps) => {\n  return (\n    <div className={'home-listings'}>\n      <Title level={4} className={'home-listings__title'}>\n        {title}\n      </Title>\n\n      <List\n        grid={{ gutter: 8, xs: 1, sm: 2, md: 2, lg: 4, xl: 4, xxl: 4 }}\n        dataSource={listings}\n        renderItem={(listing) => {\n          return (\n            <List.Item>\n              <ListingCard listing={listing} />\n            </List.Item>\n          );\n        }}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Card, List, Skeleton } from 'antd';\nimport './styles.css';\n\nexport const HomeListingsSkeleton = () => {\n  const emptyData = [{}, {}, {}, {}];\n\n  return (\n    <div className={'home-listings-skeleton'}>\n      <Skeleton paragraph={{ rows: 0 }} />\n      <List\n        grid={{ gutter: 8, xs: 1, sm: 2, md: 2, lg: 4, xl: 4, xxl: 4 }}\n        dataSource={emptyData}\n        renderItem={() => {\n          return (\n            <List.Item>\n              <Card cover={<div className={'home-listings-skeleton__card-cover-img'} />} loading />\n            </List.Item>\n          );\n        }}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { useQuery } from 'react-apollo';\nimport { LISTINGS } from '../../lib/graphql/queries/Listings';\nimport { Listings, ListingsVariables } from '../../lib/graphql/queries/Listings/__generated__/Listings';\nimport { Col, Layout, Row, Typography } from 'antd';\nimport { HomeHero } from './components/HomeHero';\nimport { HomeListings } from './components/HomeListings';\nimport { HomeListingsSkeleton } from './components/HomeListingsSkeleton';\nimport { displayErrorMessage } from '../../lib/utils';\nimport './styles.css';\n\nimport mapBackgroundImage from '../../assets/images/mapBackgroundImg.jpg';\nimport sanFranciscoImage from '../../assets/images/sanFransiscoImg.jpg';\nimport cancunImage from '../../assets/images/cancunImg.jpg';\nimport { ListingsFilter } from '../../lib/graphql/globalTypes';\n\nconst { Title, Paragraph } = Typography;\n\nconst PAGE_LIMIT = 4;\nconst PAGE_NUMBER = 1;\n\nexport const HomePage = ({ history }: RouteComponentProps) => {\n  const { data, loading } = useQuery<Listings, ListingsVariables>(LISTINGS, {\n    variables: {\n      filter: ListingsFilter.PRICE_HIGH_TO_LOW,\n      page: PAGE_NUMBER,\n      limit: PAGE_LIMIT,\n    },\n  });\n\n  const onSearch = (value: string) => {\n    const trimmedValue = value.trim();\n\n    if (trimmedValue) {\n      history.push(`listings/${trimmedValue}`);\n    } else {\n      displayErrorMessage('Please enter a valid search!');\n    }\n  };\n\n  const renderListingsSection = () => {\n    if (loading) {\n      return <HomeListingsSkeleton />;\n    }\n\n    if (data) {\n      return <HomeListings title={'Premium Listings'} listings={data.listings.result} />;\n    }\n\n    return null;\n  };\n\n  return (\n    <Layout.Content className={'home'} style={{ backgroundImage: `url(${mapBackgroundImage})` }}>\n      <HomeHero onSearch={onSearch} />\n\n      <div className={'home__cta-section'}>\n        <Title level={2} className={'home__cta-section-title'}>\n          Your guide for all things rental\n        </Title>\n        <Paragraph>Helping you make the best decisions in renting your last minute locations</Paragraph>\n        <Link\n          to={'/listings/united%20states'}\n          className={'ant-btn ant-btn-primary ant-btn-lg home__cta-section-button'}\n        >\n          Popular listings in the United States\n        </Link>\n      </div>\n\n      {renderListingsSection()}\n\n      <div className={'home__listings'}>\n        <Title level={4} className={'home__listings-title'}>\n          Listings of any kind\n        </Title>\n        <Row gutter={12}>\n          <Col xs={24} sm={12}>\n            <Link to={'/listings/san%20fransisco'}>\n              <div className={'home__listings-img-cover'}>\n                <img src={sanFranciscoImage} alt={'San Fransisco'} className={'home__listings-img'} />\n              </div>\n            </Link>\n          </Col>\n          <Col xs={24} sm={12}>\n            <Link to={'/listings/cancun'}>\n              <div className={'home__listings-img-cover'}>\n                <img src={cancunImage} alt={'Cancun'} className={'home__listings-img'} />\n              </div>\n            </Link>\n          </Col>\n        </Row>\n      </div>\n    </Layout.Content>\n  );\n};\n","import { gql } from 'apollo-boost';\n\nexport const LISTING = gql`\n  query Listing($id: ID!, $bookingsPage: Int!, $limit: Int!) {\n    listing(id: $id) {\n      id\n      title\n      description\n      image\n      host {\n        id\n        name\n        avatar\n        hasWallet\n      }\n      type\n      address\n      city\n      bookings(limit: $limit, page: $bookingsPage) {\n        total\n        result {\n          id\n          tenant {\n            id\n            name\n            avatar\n          }\n          checkIn\n          checkOut\n        }\n      }\n      bookingsIndex\n      price\n      numOfGuests\n    }\n  }  \n`\n","import React from 'react';\nimport { Avatar, Divider, Tag, Typography } from 'antd';\nimport { Listing } from '../../../../lib/graphql/queries/Listing/__generated__/Listing';\nimport { EnvironmentOutlined } from '@ant-design/icons';\nimport './styles.css';\nimport { iconColor } from '../../../../lib/utils';\nimport { Link } from 'react-router-dom';\n\ntype ListingDetailsProps = {\n  listing: Listing['listing'];\n};\n\nconst { Paragraph, Title } = Typography;\n\nexport const ListingDetails = ({ listing }: ListingDetailsProps) => {\n  const { title, description, image, type, address, city, numOfGuests, host } = listing;\n\n  return (\n    <div className={'listing-details'}>\n      <div style={{ backgroundImage: `url(${image})` }} className={'listing-details__image'} />\n\n      <div className={'listing-details__information'}>\n        <Paragraph type={'secondary'} ellipsis className={'listing-details__city-address'}>\n          <Link to={`/listings/${city}`}>\n            <EnvironmentOutlined style={{ color: iconColor }} /> {city}\n          </Link>\n          <Divider type={'vertical'} />\n          {address}\n        </Paragraph>\n        <Title level={3} className={'listing-details__title'}>\n          {title}\n        </Title>\n      </div>\n\n      <Divider />\n\n      <div className={'listing-details__section'}>\n        <Link to={`/host/${host.id}`}>\n          <Avatar src={host.avatar} size={64} />\n           <Title level={2} className={'listing-details__host-name'}>\n            {host.name}\n          </Title>\n        </Link>\n      </div>\n      <Divider />\n\n      <div className={'listing-details__section'}>\n        <Title level={4}>About this space</Title>\n        <div className={'listing-details__about-items'}>\n          <Tag color={'magenta'}>{type}</Tag>\n          <Tag color={'magenta'}>{numOfGuests} Guests</Tag>\n        </div>\n        <Paragraph ellipsis={{ rows: 3, expandable: true }}>{description}</Paragraph>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Avatar, Divider, List, Typography } from 'antd';\nimport { Listing } from '../../../../lib/graphql/queries/Listing/__generated__/Listing';\nimport './styles.css';\nimport { Link } from 'react-router-dom';\n\nconst { Title, Text } = Typography;\n\ntype ListingBookingsProps = {\n  listingBookings: Listing['listing']['bookings'];\n  bookingsPage: number;\n  limit: number;\n  setBookingsPage: (page: number) => void;\n};\n\nexport const ListingBookings = ({ listingBookings, bookingsPage, limit, setBookingsPage }: ListingBookingsProps) => {\n  const total = listingBookings ? listingBookings.total : null;\n  const result = listingBookings ? listingBookings.result : null;\n\n  const listingBookingsList = listingBookings ? (\n    <List\n      grid={{ gutter: 8, xs: 1, sm: 2, lg: 3 }}\n      dataSource={result ? result : undefined}\n      locale={{ emptyText: `No bookings have been made yet!` }}\n      pagination={{\n        current: bookingsPage,\n        total: total ? total : undefined,\n        defaultPageSize: limit,\n        hideOnSinglePage: true,\n        showLessItems: true,\n        onChange: (page) => setBookingsPage(page),\n      }}\n      renderItem={(listingBookings) => {\n        const bookingHistory = (\n          <div className={'listing-bookings__history'}>\n            <div>\n              Check in: <Text strong>{listingBookings.checkIn}</Text>\n            </div>\n            <div>\n              Check out: <Text strong>{listingBookings.checkOut}</Text>\n            </div>\n          </div>\n        );\n\n        return (\n          <List.Item>\n            {bookingHistory}\n            <Link to={`/user/${listingBookings.tenant.id}`}>\n              <Avatar src={listingBookings.tenant.avatar} size={64} shape={'square'} />\n            </Link>\n          </List.Item>\n        );\n      }}\n    />\n  ) : null;\n\n  //todo copy styles from tinyHouse\n  return listingBookingsList ? (\n    <div className={'user-bookings'}>\n      <Divider />\n      <div className={'listing-bookings-section'}>\n        <Title level={4}>Bookings</Title>\n      </div>\n      {listingBookingsList}\n    </div>\n  ) : null;\n};\n","import React from 'react';\nimport { Button, Card, DatePicker, Divider, Typography } from 'antd';\nimport './styles.css';\nimport { displayErrorMessage, formatListingPrice } from '../../../../lib/utils';\nimport moment, { Moment } from 'moment';\n\nconst { Paragraph, Title } = Typography;\n\ntype ListingCreateBookingProps = {\n  price: number;\n  checkInDate: Moment | null;\n  checkOutDate: Moment | null;\n  setCheckInDate: (checkInDate: Moment | null) => void;\n  setCheckOutDate: (checkInDate: Moment | null) => void;\n};\n\nexport const ListingCreateBooking = ({\n  price,\n  checkInDate,\n  checkOutDate,\n  setCheckInDate,\n  setCheckOutDate,\n}: ListingCreateBookingProps) => {\n  const disableDate = (currentDate: Moment): boolean => {\n    if (currentDate) {\n      return currentDate.isBefore(moment().endOf('day'));\n    } else {\n      return false;\n    }\n  };\n\n  const verifyAndSetCheckoutDate = (selectedCheckOutDate: Moment | null) => {\n    if (checkInDate && selectedCheckOutDate) {\n      if (moment(selectedCheckOutDate).isBefore(checkInDate, 'days')) {\n        return displayErrorMessage(`You can't book date of check out to be prior to check in!`);\n      }\n    }\n\n    setCheckOutDate(selectedCheckOutDate);\n  };\n\n  return (\n    <div className={'listing-booking'}>\n      <Card className={'listing-booking__card'}>\n        <div>\n          <Paragraph>\n            <Title level={2} className={'listing-booking__card-title'}>\n              {formatListingPrice(price)}\n              <span>/day</span>\n            </Title>\n          </Paragraph>\n          <Divider />\n          <div className={'listing-booking__card-date-picker'}>\n            <Paragraph strong>Check in</Paragraph>\n            <DatePicker\n              value={checkInDate}\n              onChange={(dateValue) => setCheckInDate(dateValue)}\n              format={'YYYY/MM/DD'}\n              disabledDate={disableDate}\n              showToday={false}\n              onOpenChange={() => setCheckOutDate(null)}\n            />\n          </div>\n          <div className={'listing-booking__card-date-picker'}>\n            <Paragraph strong>Check out</Paragraph>\n            <DatePicker\n              value={checkOutDate}\n              onChange={(dateValue) => verifyAndSetCheckoutDate(dateValue)}\n              format={'YYYY/MM/DD'}\n              disabledDate={disableDate}\n              showToday={false}\n              disabled={!checkInDate}\n            />\n          </div>\n        </div>\n        <Divider />\n        <Button\n          disabled={!checkInDate || !checkOutDate}\n          size={'large'}\n          type={'primary'}\n          className={'listing-booking__card-cta'}\n        >\n          Request to book!\n        </Button>\n      </Card>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useQuery } from 'react-apollo';\nimport { LISTING } from '../../lib/graphql/queries/Listing';\nimport { Listing, ListingVariables } from '../../lib/graphql/queries/Listing/__generated__/Listing';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { PageSkeleton } from '../../components/PageSkeleton';\nimport { Col, Row, Layout } from 'antd';\nimport { ErrorBanner } from '../../components/ErrorBanner';\nimport { ListingDetails } from './components/ListingDetails';\nimport { ListingBookings } from './components/ListingBookings';\nimport { ListingCreateBooking } from './components/ListingCreateBooking';\nimport './styles.css';\nimport { Moment } from 'moment';\n\ntype ListingPageMatchParams = {\n  id: string;\n};\n\nconst PAGE_LIMIT = 3;\n\nexport const ListingPage = ({ match }: RouteComponentProps<ListingPageMatchParams>) => {\n  const [bookingsPage, setBookingsPage] = useState(1);\n  const [checkInDate, setCheckInDate] = useState<Moment | null>(null);\n  const [checkOutDate, setCheckOutDate] = useState<Moment | null>(null);\n\n  const { data, error, loading } = useQuery<Listing, ListingVariables>(LISTING, {\n    variables: {\n      id: match.params.id,\n      bookingsPage,\n      limit: PAGE_LIMIT,\n    },\n  });\n  console.log('data', data);\n  console.log('error', error);\n  console.log('loading', loading);\n\n  if (loading) {\n    return (\n      <Layout.Content className={'listing'}>\n        <PageSkeleton />\n      </Layout.Content>\n    );\n  }\n\n  if (error) {\n    return (\n      <Layout.Content className={'listing'}>\n        <ErrorBanner\n          description={`This listing may not exists or we've encountered an error. Please try again soon!`}\n        />\n        <PageSkeleton />\n      </Layout.Content>\n    );\n  }\n\n  const listing = data ? data.listing : null;\n  const listingBookings = listing ? listing.bookings : null;\n\n  const listingDetailsElement = listing ? <ListingDetails listing={listing} /> : null;\n  const listingBookingsElement = listingBookings ? (\n    <ListingBookings\n      listingBookings={listingBookings}\n      bookingsPage={bookingsPage}\n      limit={PAGE_LIMIT}\n      setBookingsPage={setBookingsPage}\n    />\n  ) : null;\n\n  const listingCreateBookingElement = listing ? (\n    <ListingCreateBooking\n      price={listing.price}\n      checkInDate={checkInDate}\n      checkOutDate={checkOutDate}\n      setCheckInDate={setCheckInDate}\n      setCheckOutDate={setCheckOutDate}\n    />\n  ) : null;\n\n  return (\n    <Layout.Content className={'listing'}>\n      <Row gutter={24} justify={'space-between'}>\n        <Col xs={24} lg={14}>\n          {listingDetailsElement}\n          {listingBookingsElement}\n        </Col>\n        <Col xs={24} lg={10}>\n          {listingCreateBookingElement}\n        </Col>\n      </Row>\n    </Layout.Content>\n  );\n};\n","import React from 'react';\nimport './styles.css';\nimport { ListingsFilter } from '../../../lib/graphql/globalTypes';\nimport { Select } from 'antd';\n\ntype ListingsFilterProps = {\n  filter: ListingsFilter;\n  setFilter: (filter: ListingsFilter) => void;\n};\n\nexport const ListingsFilters = ({ filter, setFilter }: ListingsFilterProps) => {\n  return (\n    <div className={'listings-filters'}>\n      <span>Filter by </span>\n      <Select value={filter} onChange={(filter: ListingsFilter) => setFilter(filter)}>\n        <Select.Option value={ListingsFilter.PRICE_LOW_TO_HIGH}>Price: Low to High</Select.Option>\n        <Select.Option value={ListingsFilter.PRICE_HIGH_TO_LOW}>Price: High to Low</Select.Option>\n      </Select>\n    </div>\n  );\n};\n","import React from 'react';\nimport './styles.css';\nimport { Pagination } from 'antd';\n\ntype ListingsPaginationProps = {\n  total: number;\n  limit: number;\n  page: number;\n  setPage: (page: number) => void;\n};\n\nexport const ListingsPagination = ({ total, page, limit, setPage }: ListingsPaginationProps) => {\n  return (\n    <Pagination\n      current={page}\n      total={total}\n      defaultPageSize={limit}\n      hideOnSinglePage\n      showSizeChanger={false}\n      showLessItems\n      onChange={(page) => setPage(page)}\n      className={'listings-pagination'}\n    />\n  );\n};\n","import React from 'react';\nimport './styles.css';\nimport { Skeleton, List, Card } from 'antd';\n\nexport const ListingsSkeleton = () => {\n  const emptyData = [{}, {}, {}, {}, {}, {}, {}, {}];\n\n  return (\n    <div className={'listings-skeleton'}>\n      <Skeleton paragraph={{ rows: 1 }} />\n      <List\n        grid={{ gutter: 8, xs: 1, sm: 2, md: 2, lg: 4, xl: 4, xxl: 4 }}\n        dataSource={emptyData}\n        renderItem={() => {\n          return (\n            <List.Item>\n              <Card cover={<div className={'listings-skeleton__card'} />} loading />\n            </List.Item>\n          );\n        }}\n      />\n    </div>\n  );\n};\n","import React, { useEffect, useState, useRef } from 'react';\nimport './styles.css';\nimport { useQuery } from 'react-apollo';\nimport { LISTINGS } from '../../lib/graphql/queries/Listings';\nimport { Listings, ListingsVariables } from '../../lib/graphql/queries/Listings/__generated__/Listings';\nimport { ListingsFilter } from '../../lib/graphql/globalTypes';\nimport { List, Layout, Typography, Affix } from 'antd';\nimport { ListingCard } from '../../components/ListingCard';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { ListingsFilters } from './ListingsFilter';\nimport { ListingsPagination } from './ListingsPagination';\nimport { ListingsSkeleton } from './ListingsSkeleton';\nimport { ErrorBanner } from '../../components/ErrorBanner';\n\ntype ListingsPageMatchParams = {\n  location: string;\n};\n\nconst { Text, Title, Paragraph } = Typography;\n\nconst PAGE_LIMIT = 8;\n\nexport const ListingsPage = ({ match }: RouteComponentProps<ListingsPageMatchParams>) => {\n  const locationRef = useRef(match.params.location);\n  const [page, setPage] = useState(1);\n  const [filter, setFilter] = useState(ListingsFilter.PRICE_HIGH_TO_LOW);\n\n  const { data, loading, error } = useQuery<Listings, ListingsVariables>(LISTINGS, {\n    skip: locationRef.current !== match.params.location && page !== 1,\n    variables: {\n      location: match.params.location,\n      limit: PAGE_LIMIT,\n      filter,\n      page,\n    },\n  });\n\n  useEffect(() => {\n    setPage(1);\n    locationRef.current = match.params.location;\n  }, [match.params.location]);\n\n  if (loading || error) {\n    return (\n      <Layout.Content className={'listings'}>\n        {error && (\n          <ErrorBanner\n            description={`We either couldn't find anything matching your search or have encountered an error. If you're searching for a unique location, try searching again with more common keyword.`}\n          />\n        )}\n        <ListingsSkeleton />\n      </Layout.Content>\n    );\n  }\n\n  const listings = data ? data.listings : null;\n  const listingsRegion = listings ? listings.region : null;\n\n  const listingsSectionElement =\n    listings && listings.result.length ? (\n      <div>\n        <Affix offsetTop={64}>\n          <ListingsPagination total={listings.total} page={page} setPage={setPage} limit={PAGE_LIMIT} />\n          <ListingsFilters filter={filter} setFilter={setFilter} />\n        </Affix>\n        <List\n          grid={{ gutter: 8, xs: 1, sm: 2, md: 2, lg: 4, xl: 4, xxl: 4 }}\n          dataSource={listings.result}\n          renderItem={(listing) => {\n            return (\n              <List.Item>\n                <ListingCard listing={listing} />\n              </List.Item>\n            );\n          }}\n        />\n      </div>\n    ) : (\n      <div>\n        <Paragraph>\n          It appears that no listings have yet been created for <Text mark>{listingsRegion}</Text>\n        </Paragraph>\n        <Paragraph strong>\n          Be the first person to create a <Link to={'/host'}>listing in this ares</Link>!\n        </Paragraph>\n      </div>\n    );\n\n  const listingsRegionElement = listingsRegion ? (\n    <Title level={3} className={'listings__title'}>\n      Results for \"{listingsRegion}\"\n    </Title>\n  ) : null;\n\n  return (\n    <Layout.Content className={'listings'}>\n      {listingsRegionElement}\n      {listingsSectionElement}\n    </Layout.Content>\n  );\n};\n","import { gql } from 'apollo-boost';\n\nexport const CONNECT_STRIPE = gql`\n  mutation ConnectStripe($input: ConnectStripeInput!) {\n    connectStripe(input: $input) {\n      hasWallet\n    }\n  }\n`;\n","import React, { useEffect, useRef } from 'react';\nimport './styles.css';\nimport { useMutation } from 'react-apollo';\nimport { CONNECT_STRIPE } from '../../lib/graphql/mutations/ConnectStripe';\nimport {\n  ConnectStripe,\n  ConnectStripeVariables,\n} from '../../lib/graphql/mutations/ConnectStripe/__generated__/ConnectStripe';\nimport { Spin, Layout } from 'antd';\nimport { Viewer } from '../../general/types';\nimport { Redirect, RouteComponentProps } from 'react-router-dom';\nimport { displaySuccessNotification } from '../../lib/utils';\n\ntype StripePageProps = {\n  viewer: Viewer;\n  setViewer: (viewer: Viewer) => void;\n};\n\nexport const StripePage = ({ viewer, setViewer, history }: StripePageProps & RouteComponentProps) => {\n  const [connectStripe, { data, loading, error }] = useMutation<ConnectStripe, ConnectStripeVariables>(CONNECT_STRIPE, {\n    onCompleted: (data) => {\n      if (data && data.connectStripe) {\n        setViewer({ ...viewer, hasWallet: data.connectStripe.hasWallet });\n        displaySuccessNotification(\n          `You've successfully connected your Stripe Account!`,\n          'You can now begin to create listings in the Host page',\n        );\n      }\n    },\n  });\n\n  const connectStripeRef = useRef(connectStripe);\n\n  useEffect(() => {\n    const code = new URL(window.location.href).searchParams.get('code');\n\n    if (code) {\n      connectStripeRef.current({\n        variables: {\n          input: { code },\n        },\n      });\n    } else {\n      history.replace('/login');\n    }\n  }, [history]);\n\n  if (data && data.connectStripe) {\n    return <Redirect to={`/user/${viewer.id}`} />;\n  }\n\n  if (loading || true) {\n    return (\n      <Layout.Content className={'stripe'}>\n        <Spin size={'large'} tip={'Connecting your Stripe account...'} />\n      </Layout.Content>\n    );\n  }\n\n  if (error) {\n    return <Redirect to={`/user/${viewer.id}?stripe_error=true`} />;\n  }\n\n  return null;\n};\n","import { gql } from 'apollo-boost';\n\nexport const HOST_LISTING = gql`\n  mutation HostListing($input: HostListingInput!) {\n    hostListing(input: $input) {\n      id\n    }\n  }\n`\n","import React, { useRef, useState } from 'react';\nimport './styles.css';\nimport { Typography, Layout, Form, Input, InputNumber, Radio, Upload, Button } from 'antd';\nimport { Viewer } from '../../general/types';\nimport { Link, Redirect } from 'react-router-dom';\nimport { HostListingInput, ListingType } from '../../lib/graphql/globalTypes';\nimport { HomeOutlined, BankOutlined, PlusOutlined, LoadingOutlined } from '@ant-design/icons';\nimport { displayErrorMessage, displaySuccessNotification, iconColor } from '../../lib/utils';\nimport { UploadChangeParam } from 'antd/lib/upload';\nimport { HOST_LISTING } from '../../lib/graphql/mutations/HostListing';\nimport { HostListing, HostListingVariables } from '../../lib/graphql/mutations/HostListing/__generated__/HostListing';\nimport { useMutation } from 'react-apollo';\n\nconst { Text, Title } = Typography;\n\ntype HostPageProps = {\n  viewer: Viewer;\n};\n\nexport const HostPage = ({ viewer }: HostPageProps) => {\n  const [imageLoading, setImageLoading] = useState(false);\n  const [imageBase64, setImageBase64] = useState<string | null>(null);\n\n  const [hostListing, { loading, data }] = useMutation<HostListing, HostListingVariables>(HOST_LISTING, {\n    onCompleted: () => {\n      displaySuccessNotification(`You've successfully created ypur listing!`);\n    },\n    onError: () => {\n      displayErrorMessage(`Sorry! We weren't able to create your listing. Please try again later.`);\n    },\n  });\n\n  const hostListingRef = useRef(hostListing);\n\n  const onFinish = (values: any) => {\n    const fullAddress = `${values.address}, ${values.city} ${values.state}, ${values.postalCode}`;\n\n    const input: HostListingInput = {\n      title: values.title,\n      description: values.description,\n      image: imageBase64 || '',\n      type: values.type,\n      address: fullAddress,\n      price: values.price * 100,\n      numOfGuests: values.numOfGuests,\n    };\n\n    hostListingRef.current({  variables: { input } });\n  };\n\n  const handleImageUpload = (info: UploadChangeParam) => {\n    const { file } = info;\n\n    if (file.status === 'uploading') {\n      setImageLoading(true);\n      return;\n    }\n\n    if (file.status === 'done' && file.originFileObj) {\n      getBase64Value(file.originFileObj, (imageBase64Value) => {\n        setImageBase64(imageBase64Value);\n        setImageLoading(false);\n      });\n    }\n  };\n\n  if (!viewer.id || !viewer.hasWallet) {\n    return (\n      <Layout.Content className={'host-content'}>\n        <div className={'host__form-header'}>\n          <Title level={4} className={'host__form-title'}>\n            You'll have to be signed in and connected with Stripe to host a listing!\n          </Title>\n          <Text type={'secondary'}>\n            We only allow users who've signed in to our application and have connected with Stripe to host new listings.\n            You can sign in at the <Link to={'/login'}>/login</Link> page and connect with Stripe shortly after.\n          </Text>\n        </div>\n      </Layout.Content>\n    );\n  }\n\n  if (loading) {\n    return (\n      <Layout.Content className={'host-content'}>\n        <div className={'host__form-header'}>\n          <Title level={4} className={'host__form-title'}>\n            Please wait!\n          </Title>\n          <Text type={'secondary'}>We're creating your listing now</Text>\n        </div>\n      </Layout.Content>\n    );\n  }\n\n  if (data && data.hostListing) {\n    return <Redirect to={`/listing/${data.hostListing.id}`} />;\n  }\n\n  return (\n    <Layout.Content className={'host-content'}>\n      <Form layout={'vertical'} onFinish={onFinish}>\n        <div className={'host__form-header'}>\n          <Title level={3} className={'host__form-title'}>\n            Hi! Let's get started listing your place\n          </Title>\n          <Text type={'secondary'}>\n            In this form, we'll collect some basic and additional information about your listing\n          </Text>\n        </div>\n\n        <Form.Item label={'Type'} name={'type'} rules={[{ required: true, message: 'Please select a home type' }]}>\n          <Radio.Group>\n            <Radio.Button value={ListingType.APARTMENT}>\n              <BankOutlined style={{ color: iconColor }} /> <span>Apartment</span>\n            </Radio.Button>\n            <Radio.Button value={ListingType.HOUSE}>\n              <HomeOutlined style={{ color: iconColor }} /> <span>House</span>\n            </Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n\n        <Form.Item\n          label={'Max # of Guests'}\n          name={'numOfGuests'}\n          rules={[{ required: true, message: 'Please enter a max number of guests!' }]}\n        >\n          <InputNumber min={1} placeholder={'4'} />\n        </Form.Item>\n\n        <Form.Item\n          label={'Title'}\n          name={'title'}\n          extra={'Max character count of 45'}\n          rules={[{ required: true, message: 'Please enter a title for your listing!' }]}\n        >\n          <Input maxLength={45} placeholder={'The iconic and luxurious Bel-Air mansion'} />\n        </Form.Item>\n\n        <Form.Item\n          label={'Description of listing'}\n          name={'description'}\n          extra={'Max character count of 400'}\n          rules={[{ required: true, message: 'Please enter a description for your listing!' }]}\n        >\n          <Input.TextArea\n            rows={3}\n            maxLength={400}\n            placeholder={\n              'Modern, clean, and iconic home of the Fresh Prince. Situated in the heart of Bel-Air, Los Angeles.'\n            }\n          />\n        </Form.Item>\n\n        <Form.Item\n          label={'Address'}\n          name={'address'}\n          rules={[{ required: true, message: 'Please enter a address for your listing!' }]}\n        >\n          <Input maxLength={150} placeholder={'251 North Bristol Avenue'} />\n        </Form.Item>\n\n        <Form.Item\n          label={'City/Town'}\n          name={'city'}\n          rules={[{ required: true, message: 'Please enter a city (or region) for your listing!' }]}\n        >\n          <Input maxLength={45} placeholder={'Los Angeles'} />\n        </Form.Item>\n\n        <Form.Item\n          label={'State/Province'}\n          name={'state'}\n          rules={[{ required: true, message: 'Please enter a state (or province) for your listing!' }]}\n        >\n          <Input maxLength={45} placeholder={'California'} />\n        </Form.Item>\n\n        <Form.Item\n          label={'Zip/Postal Code'}\n          name={'postalCode'}\n          rules={[{ required: true, message: 'Please enter a zip (or postal) code for your listing!' }]}\n        >\n          <Input maxLength={45} placeholder={'Please en ter a zip code for your listing!'} />\n        </Form.Item>\n\n        <Form.Item\n          label={'Image'}\n          name={'image'}\n          extra={'Images have to be under 1MB in size and of type JPG or PNG'}\n          rules={[{ required: true, message: 'Please provide an image for your listing!' }]}\n        >\n          <div className={'host__form-image-upload'}>\n            <Upload\n              name={'image'}\n              listType={'picture-card'}\n              showUploadList={false}\n              action={'https://www.mocky.io/v2/5cc8019d300000980a055e76'}\n              beforeUpload={beforeImageUpload}\n              onChange={handleImageUpload}\n            >\n              {imageBase64 ? (\n                <img src={imageBase64} alt={'listing'} />\n              ) : (\n                <div>\n                  {imageLoading ? <LoadingOutlined /> : <PlusOutlined />}\n                  <div className={'ant-upload-text'}>Upload</div>\n                </div>\n              )}\n            </Upload>\n          </div>\n        </Form.Item>\n\n        <Form.Item\n          label={'Price'}\n          name={'price'}\n          extra={'Price $USD/day'}\n          rules={[{ required: true, message: 'Please enter a price for your listing!' }]}\n        >\n          <InputNumber min={0} placeholder={'120'} />\n        </Form.Item>\n\n        <Form.Item>\n          <Button type={'primary'} htmlType={'submit'}>\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </Layout.Content>\n  );\n};\n\nconst beforeImageUpload = (file: File): boolean => {\n  const fileIsValidImage = file.type === 'image/jpeg' || file.type === 'image/png';\n  const fileIsValidSize = file.size / 1024 / 1024 < 1;\n\n  if (!fileIsValidImage) {\n    displayErrorMessage(`You're only able to upload valid JPG or PNG files!`);\n    return false;\n  }\n\n  if (!fileIsValidSize) {\n    displayErrorMessage(`You're only able to upload valid image files of under 1MB in size! or PNG files!`);\n    return false;\n  }\n\n  return fileIsValidImage && fileIsValidSize;\n};\n\nconst getBase64Value = (img: File | Blob, callback: (imageBase64Value: string) => void) => {\n  const reader = new FileReader();\n  reader.readAsDataURL(img);\n  reader.onload = () => {\n    callback(reader.result as string);\n  };\n};\n","import { gql } from 'apollo-boost';\n\nexport const LOG_IN = gql`\n  mutation LogIn($input: LogInInput) {\n    logIn(input: $input) {\n      id\n      token\n      avatar\n      hasWallet\n      didRequest\n    }\n  }\n`;\n","import { gql } from 'apollo-boost';\n\nexport const AUTH_URL = gql`\n  query AuthUrl {\n    authUrl\n  }\n`;\n","import React, { useEffect, useRef } from 'react';\nimport { useApolloClient, useMutation } from 'react-apollo';\nimport googleLogo from '../../assets/images/googleLogo.jpg';\nimport { Layout, Card, Typography, Spin } from 'antd';\nimport { LOG_IN } from '../../lib/graphql/mutations/LogIn';\nimport { AUTH_URL } from '../../lib/graphql/queries/AuthUrl';\nimport { Viewer } from '../../general/types';\nimport { AuthUrl } from '../../lib/graphql/queries/AuthUrl/__generated__/AuthUrl';\nimport { LogIn, LogInVariables } from '../../lib/graphql/mutations/LogIn/__generated__/LogIn';\nimport { displayErrorMessage, displaySuccessNotification } from '../../lib/utils';\nimport { ErrorBanner } from '../../components/ErrorBanner';\nimport { Redirect } from 'react-router-dom';\n\ntype LoginProps = {\n  setViewer: (viewer: Viewer) => void;\n};\nexport const Login = ({ setViewer }: LoginProps) => {\n  const client = useApolloClient();\n  const [logIn, { data: logInData, loading: logInLoading, error: logInError }] = useMutation<LogIn, LogInVariables>(\n    LOG_IN,\n    {\n      onCompleted: (data) => {\n        if (data && data.logIn && data.logIn.token) {\n          setViewer(data.logIn);\n          sessionStorage.setItem('token', data.logIn.token);\n          displaySuccessNotification(`You've successfully logged in!`);\n        }\n      },\n    },\n  );\n\n  const logInRef = useRef(logIn);\n\n  useEffect(() => {\n    const code = new URL(window.location.href).searchParams.get('code');\n\n    if (code) {\n      logInRef.current({\n        variables: {\n          input: { code },\n        },\n      });\n    }\n  }, []);\n\n  const handleAuthorize = async () => {\n    try {\n      const { data } = await client.query<AuthUrl>({ query: AUTH_URL });\n      window.location.href = data.authUrl;\n    } catch (err) {\n      console.log('err');\n      displayErrorMessage(`Sorry! We weren't able to log you in. Please try again later!`);\n    }\n  };\n\n  if (logInLoading) {\n    return (\n      <Layout.Content className={'log-in'}>\n        <Spin size={'large'} tip={'Logging you in...'} />\n      </Layout.Content>\n    );\n  }\n\n  if (logInData && logInData.logIn) {\n    const { id: viewerId } = logInData.logIn;\n    return <Redirect to={`user/${viewerId}`} />;\n  }\n\n  const logInErrorBannerElement = logInError ? (\n    <ErrorBanner description={`Sorry! We weren't able to log you in. Please try again later!`} />\n  ) : null;\n\n  return (\n    <Layout.Content className={'log-in'}>\n      {logInErrorBannerElement}\n      <Card className={'log-in-card'}>\n        <div className={'log-in-card_intro'}>\n          <Typography.Title>\n            <span role={'img'} aria-label={'wave'}>\n              hi!\n            </span>\n          </Typography.Title>\n          <Typography.Title level={3} className={'log-in-card__intro-title'}>\n            Log in to TinyHouse!\n          </Typography.Title>\n          <Typography.Text>Sign in with Google to start booking available rentals!</Typography.Text>\n        </div>\n        <button className={'log-in-card__google-button'} onClick={handleAuthorize}>\n          <img src={googleLogo} alt={'Google Logo'} className={'log-in-card__google-button-logo'} />\n          <span className={'log-in-card__google-button-text'}>Sign in with Google</span>\n        </button>\n        <Typography.Text type={'secondary'}>\n          Note: By signing in, you'll be redirected to the Google consent form to sign in with your Google account.\n        </Typography.Text>\n      </Card>\n    </Layout.Content>\n  );\n};\n","import { gql } from 'apollo-boost';\n\nexport const LOG_OUT = gql`\n  mutation LogOut {\n    logOut {\n      id\n      token\n      avatar\n      hasWallet\n      didRequest\n    }\n  }\n`;\n","import React from 'react';\nimport './styles.css';\nimport { Avatar, Button, Menu } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { HomeOutlined, ProfileFilled, LogoutOutlined } from '@ant-design/icons';\nimport { Viewer } from '../../../../general/types';\nimport { useMutation } from 'react-apollo';\nimport { LogOut } from '../../../../lib/graphql/mutations/LogOut/__generated__/LogOut';\nimport { LOG_OUT } from '../../../../lib/graphql/mutations/LogOut';\nimport { displayErrorMessage, displaySuccessNotification } from '../../../../lib/utils';\n\ntype MenuItemsProps = {\n  viewer: Viewer;\n  setViewer: (viewer: Viewer) => void;\n};\n\nexport const MenuItems = ({ viewer, setViewer }: MenuItemsProps) => {\n  const [logout] = useMutation<LogOut>(LOG_OUT, {\n    onCompleted: (data) => {\n      if (data && data.logOut) {\n        setViewer(data.logOut);\n        sessionStorage.removeItem('token');\n        displaySuccessNotification(`You've successfully logged out`);\n      }\n    },\n    onError: () => {\n      displayErrorMessage(`Sorry! We weren't able to log you out. Please try again later!`);\n    },\n  });\n\n  const handleLogOut = () => {\n    logout();\n  };\n\n  const subMenuLogin =\n    viewer.id && viewer.avatar ? (\n      <Menu.SubMenu title={<Avatar src={viewer.avatar} />}>\n        <Menu.Item key={'user'}>\n          <Link to={`/user/${viewer.id}`}>\n            <ProfileFilled />\n            Profile\n          </Link>\n        </Menu.Item>\n        <Menu.Item key={'logout'}>\n          <div onClick={handleLogOut}>\n            <LogoutOutlined />\n            Log out\n          </div>\n        </Menu.Item>\n      </Menu.SubMenu>\n    ) : (\n      <Menu.Item>\n        <Link to={'/login'}>\n          <Button type={'primary'}>Sign In</Button>\n        </Link>\n      </Menu.Item>\n    );\n\n  return (\n    <Menu mode={'horizontal'} selectable={false} className={'menu'}>\n      <Menu.Item>\n        <Link to={'/host'}>\n          <HomeOutlined />\n          Host\n        </Link>\n      </Menu.Item>\n      {subMenuLogin}\n    </Menu>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './styles.css';\nimport { Input, Layout } from 'antd';\nimport vv_logo from '../../assets/images/vv_logo.jpg';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport { MenuItems } from './components/MenuItems';\nimport { Viewer } from '../../general/types';\nimport { displayErrorMessage } from '../../lib/utils';\n\ntype AppHeaderProps = {\n  viewer: Viewer;\n  setViewer: (viewer: Viewer) => void;\n};\n\nconst { Search } = Input;\n\nexport const AppHeader = withRouter(\n  ({ viewer, setViewer, history, location }: AppHeaderProps & RouteComponentProps) => {\n    const [search, setSearch] = useState();\n\n    useEffect(() => {\n      const { pathname } = location;\n      const pathnameSubStrings = pathname.split('/');\n\n      if (!pathname.includes('/listings')) {\n        setSearch('');\n        return;\n      }\n\n      if (pathname.includes('/listings') && pathnameSubStrings.length === 3) {\n        setSearch(pathnameSubStrings[2]);\n        return;\n      }\n    }, [location]);\n\n    const onSearch = (value: string) => {\n      const trimmedValue = value.trim();\n\n      if (trimmedValue) {\n        history.push(`/listings/${trimmedValue}`);\n      } else {\n        displayErrorMessage('Please enter a valid search!');\n      }\n    };\n\n    return (\n      <Layout.Header className={'app-header'}>\n        <div className={'app-header__logo-search-section'}>\n          <div className={'app-header__logo'}>\n            <Link to={'/'}>\n              <img src={vv_logo} alt={'App logo'} />\n            </Link>\n          </div>\n          <div className={'app-header__search-input'}>\n            <Search\n              placeholder={`Search 'San Fransisco'`}\n              enterButton\n              onSearch={onSearch}\n              value={search}\n              onChange={(evt) => setSearch(evt.target.value)}\n            />\n          </div>\n        </div>\n        <div className={'app-header__menu-section'}>\n          <MenuItems viewer={viewer} setViewer={setViewer} />\n        </div>\n      </Layout.Header>\n    );\n  },\n);\n","import React from 'react';\nimport { Layout } from 'antd';\nimport vv_logo from '../../assets/images/vv_logo.jpg';\n\nexport const AppHeaderSkeleton = () => {\n  return (\n    <Layout.Header className={'app-header'}>\n      <div className={'app-header__logo-search-section'}>\n        <div className={'app-header__logo'}>\n          <img src={vv_logo} alt={'App logo'} />\n        </div>\n      </div>\n    </Layout.Header>\n  );\n};\n","import React, { useEffect, useState, useRef } from 'react';\nimport { useMutation } from 'react-apollo';\nimport './styles/index.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { NotFound } from './sections/NotFound';\nimport { UserPage } from './sections/UserPage';\nimport { HomePage } from './sections/HomePage';\nimport { ListingPage } from './sections/ListingPage';\nimport { ListingsPage } from './sections/ListingsPage';\nimport { StripePage } from './sections/StripePage';\nimport { HostPage } from './sections/HostPage';\nimport { Login } from './sections/Login';\nimport { AppHeader } from './sections/AppHeader';\nimport { Affix, Layout, Spin } from 'antd';\nimport { Viewer } from './general/types';\nimport { AppHeaderSkeleton } from './components/AppHeaderSkeleton';\nimport { LogIn } from './lib/graphql/mutations/LogIn/__generated__/LogIn';\nimport { LOG_IN } from './lib/graphql/mutations/LogIn';\nimport { ErrorBanner } from './components/ErrorBanner';\n\nconst initialViewer: Viewer = {\n  id: null,\n  token: null,\n  avatar: null,\n  hasWallet: null,\n  didRequest: false,\n};\n\nexport const App = () => {\n  const [viewer, setViewer] = useState(initialViewer);\n\n  const [logIn, { error }] = useMutation<LogIn>(LOG_IN, {\n    onCompleted: (data) => {\n      if (data && data.logIn) {\n        setViewer(data.logIn);\n\n        if (data.logIn.token) {\n          sessionStorage.setItem('token', data.logIn.token);\n        } else {\n          sessionStorage.removeItem('token');\n        }\n      }\n    },\n  });\n\n  const logInRef = useRef(logIn);\n\n  useEffect(() => {\n    logInRef.current();\n  }, []);\n\n  if (!viewer.didRequest && !error) {\n    return (\n      <Layout className={'app'}>\n        <AppHeaderSkeleton />\n        <div className={'app-skeleton__spin-section'}>\n          <Spin size={'large'} tip={'Launching Vv'} />\n        </div>\n      </Layout>\n    );\n  }\n\n  const logInErrorBannerElement = error ? (\n    <ErrorBanner description={`We weren't able to verify if you were logged in. Please try again later`} />\n  ) : null;\n\n  return (\n    <BrowserRouter>\n      <Layout className={'app'}>\n        {logInErrorBannerElement}\n        <Affix offsetTop={0} className={'app_affix-header'}>\n          <AppHeader viewer={viewer} setViewer={setViewer} />\n        </Affix>\n        <Switch>\n          <Route exact path={'/'} component={HomePage} />\n          <Route exact path={'/login'} render={(props) => <Login {...props} setViewer={setViewer} />} />\n          <Route\n            exact\n            path={'/stripe'}\n            render={(props) => <StripePage {...props} viewer={viewer} setViewer={setViewer} />}\n          />\n          <Route\n            exact\n            path={'/user/:id'}\n            render={(props) => <UserPage {...props} viewer={viewer} setViewer={setViewer} />}\n          />\n          <Route exact path={'/host'} render={(props) => <HostPage {...props} viewer={viewer} />} />\n          <Route exact path={'/listing/:id'} component={ListingPage} />\n          <Route exact path={'/listings/:location?'} component={ListingsPage} />\n          <Route component={NotFound} />\n        </Switch>\n      </Layout>\n    </BrowserRouter>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { App } from './App';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nconst client = new ApolloClient({\n  uri: '/api',\n  request: async (operation) => {\n    const token = sessionStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        'X-CSRF-TOKEN': token || '',\n      },\n    });\n  },\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}